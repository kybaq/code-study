#문제 이해
# N개의 숫자 카드가 주어졌을 때, 가장 많이 등장한 숫자를 찾는 문제
# 숫자들의 빈도를 계산하고, 최빈값을 찾는 문제다.

#예제 이해
# 입력
# 5
# 1
# 2
# 1
# 2
# 1

# 빈도 계산
# 1 → 3번 등장
# 2 → 2번 등장

# 최빈값 선택
# 최빈값: 1(3번 등장)
# 1과 2 중에서 1이 더 많이 등장하므로 1을 출력한다.

# 출력
# 1

#아이디어 창출
# 등장 횟수를 효율적으로 계산해야 함
# 	1) 숫자의 범위가 매우 크므로, 리스트를 이용한 카운팅은 불가능
# 	2) 따라서 딕셔너리(해시맵) 또는 Counter를 사용하여 등장 횟수를 저장
# 최빈값을 찾을 때 정렬을 이용할 수도 있음
# 	1) 등장 횟수를 기준으로 내림차순 정렬
# 	2) 등장 횟수가 같다면 숫자 기준 오름차순 정렬
# 효율적인 알고리즘 선택
# 	1) collections.Counter를 사용하면 등장 횟수를 쉽게 계산 가능 (O(N))
# 	2) sorted()를 이용하면 등장 횟수를 기준으로 정렬 (O(N log N))
# 	3) 따라서 전체 시간 복잡도는 O(N log N)으로 해결
 
#아이디어를 문제에 적용
# 	1) sys.stdin.readline()을 사용하여 빠르게 입력을 받음
# 	2) N을 입력받고, 이후 숫자 카드를 리스트로 저장
# 	3) Counter를 사용하여 각 숫자의 등장 횟수를 계산
# 	4) sorted()를 사용하여 정렬 기준을 적용한다.
# 	    빈도 기준 내림차순 (-x[1])
# 	    숫자 기준 오름차순 (x[0])
# 	5) 정렬된 리스트의 첫 번째 요소를 출력

import sys
from collections import Counter

# 입력 받기
N = int(sys.stdin.readline().strip())  # 첫 줄에서 N 입력 받기
cards = [int(sys.stdin.readline().strip()) for _ in range(N)]  # 숫자 카드 리스트 입력받기

# 등장 횟수 계산
count_dict = Counter(cards)  # 각 숫자의 등장 횟수를 계산

# 정렬 (빈도 내림차순, 숫자 오름차순)
most_common = sorted(count_dict.items(), key=lambda x: (-x[1], x[0]))

# 가장 많이 등장한 숫자 출력
print(most_common[0][0])