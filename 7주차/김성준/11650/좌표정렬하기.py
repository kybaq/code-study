#문제 이해
# 이 문제는 2차원 평면 위의 주어진 (x, y)의 형태를 N개의 점을 특정 기준에 따라 정렬하는 문제
# 	1)	x좌표 기준 오름차순 정렬
# 	2)	x좌표가 같다면 y좌표 기준 오름차순 정렬

#예제 이해
# 입력
# 5
# 3 4
# 1 1
# 1 -1
# 2 2
# 3 3

# 정렬 과정
# x 좌표 기준으로 오름차순 정렬:
# 	1) (1, 1), (1, -1), (2, 2), (3, 4), (3, 3)
# x 좌표가 같은 경우, y 좌표 기준으로 오름차순 정렬:
# 	1) (1, -1) → (1, 1)
# 	2) (3, 3) → (3, 4)

# 출력
# 1 -1
# 1 1
# 2 2
# 3 3
# 3 4


#아이디어 창출
# 핵심 아이디어는 정렬 기준을 적절히 적용하는 것
# 어떤 정렬 알고리즘을 사용할 것인가?
# 	1) N의 범위가 100,000까지 크므로, O(N log N)의 정렬 알고리즘을 사용
# 	2) 파이썬에서는 sort() 혹은 sorted()를 사용하면 내부적으로 Timsort(O(N log N))가 적용되므로 이를 활용
# 정렬 기준을 어떻게 적용할 것인가?
# 	1) sort() 함수에서 정렬의 기준을 설정 가능
# 	2) (x, y) 튜플을 정렬하면 기본적으로 첫 번째 원소(x)를 기준으로 정렬하고, x가 같으면 두 번째 원소(y)를 기준으로 정렬

#아이디어를 문제에 적용
# 입력받기
# 	1) 먼저 점의 개수 N을 입력받기
# 	2) 이후 N개의 (x, y) 좌표를 리스트에 저장
# 정렬 기준 설정
# 	1) 기본적으로 x 좌표 기준으로 오름차순 정렬
# 	2) 만약 x 좌표가 같다면, y 좌표 기준으로 오름차순 정렬
# 	3) 즉, (x, y) 형태의 튜플을 정렬하면 자동으로 위 기준이 적용 가능
# 정렬 수행
#   1) 정렬 알고리즘은 O(N log N)를 사용하여 효율적으로 정렬
# 	2) 파이썬에서 sort() 혹은 sorted()를 사용하면 자동으로 튜플의 첫 번째 요소(x) 기준 정렬 => 두 번째 요소(y) 기준 정렬이 적용가능
# 출력하기
# 	1) 정렬된 좌표들을 순차적으로 출력

import sys

# 입력 받기
N = int(sys.stdin.readline().strip())  # 첫 줄에서 N 입력 받기
points = [tuple(map(int, sys.stdin.readline().split())) for _ in range(N)]  # N개의 (x, y) 좌표 입력 받기

# 정렬 (x좌표 -> y좌표 순서)
points.sort()  

for x, y in points:
    print(x, y)