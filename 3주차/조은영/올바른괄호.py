def solution(s):
    stack = []  # 여는 괄호를 저장할 스택

    for char in s:  # 문자열을 한 문자씩 순회
        if char == '(':  
            stack.append(char)  # 여는 괄호를 스택에 추가
        else:  # 닫는 괄호일 경우
            if stack:  # 스택이 비어있지 않다면
                stack.pop()  # 스택에서 여는 괄호 하나 제거
            else:  
                return False  # 스택이 비어있으면 짝이 맞지 않음
    
    return len(stack) == 0  # 모든 작업 후 스택이 비어있으면 True

스택 활용 방식 설명
스택 초기화:

스택은 여는 괄호를 임시로 저장할 공간입니다.
문자열 순회:

'('이면 스택에 추가합니다.
')'이면 스택에서 가장 최근에 추가한 '('를 제거(pop)합니다.
스택이 비어있는데 ')'가 나오면 짝이 맞지 않으므로 바로 False를 반환합니다.
검사 완료 후 스택 확인:

문자열을 모두 확인한 뒤, 스택이 비어있으면 올바른 괄호(True), 스택에 남아 있으면 올바르지 않은 괄호(False)입니다.
예제 실행
예제 1: s = "()()"
스택 초기화: stack = [].
'(' → stack = ['('] → ')' → stack = [].
'(' → stack = ['('] → ')' → stack = [].
최종적으로 스택이 비었으므로 True.
예제 2: s = "(()("
스택 초기화: stack = [].
'(' → stack = ['('] → '(' → stack = ['(', '('].
')' → stack = ['('] → '(' → stack = ['(', '('].
최종적으로 스택이 비어 있지 않으므로 False.
예제 3: s = ")()("
스택 초기화: stack = [].
')' → 스택이 비어있음 → 바로 False 반환.
시간 복잡도
O(n): 문자열의 길이만큼 한 번 순회.
공간 복잡도: O(n) (스택에 여는 괄호를 저장하는 데 사용).
정리
카운터 활용 방식: 더 메모리 효율적 (O(1)).
스택 활용 방식: 직관적이고 범용적으로 사용할 수 있음.